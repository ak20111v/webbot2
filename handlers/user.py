from loguru import logger
from os import remove
from io import BytesIO
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hcode, hlink

from middlewares import rate_limit
import keyboards as kb

import database
from loader import bot
from data import configuration
from loader import vpn_config
from database import selector

from utils.payment import YookassaPayment
from utils.fsm import NewConfig
from utils.qr_code import create_qr_code_from_peer_data
from aiogram.utils.exceptions import ChatNotFound

async def cmd_start(message: types.Message) -> types.Message:
    if not message.from_user.username:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username, —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∏ –Ω–∞–ø–∏—à–∏ /start\n"
            f"–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å - –ø–æ—Å–º–æ—Ç—Ä–∏ {hlink('—Å–ø—Ä–∞–≤–∫—É', 'https://silverweb.by/kak-sozdat-nik-v-telegramm/')}",
            parse_mode=types.ParseMode.HTML,
        )
        return
    if database.selector.is_exist_user(message.from_user.id):
        status = database.selector.is_subscription_end(message.from_user.id)
        if status is True:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username}, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –æ–ø–ª–∞—Ç–∏ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN",
                reply_markup=await kb.update_user_kb(message.from_user.id),
            )
            return
        elif status is False:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username},\n\nüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \nü§Ø –£—Å—Ç–∞–ª –æ—Ç –ø–æ–∏—Å–∫–æ–≤ VPN?. \nüöÄ –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É VPN-WEBAM –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n\nüü¢ –ù–∞—à–∏ –ø—Ä–µ–º—É—â–µ—Å—Ç–≤–∞:\n\n‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–∞–π—Ç–∞–º –∏ —Å–æ—Ü —Å–µ—Ç—è–º\n\nüî¥ –ú—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤ –†–§ –≤–µ–±-—Å–∞–π—Ç–æ–≤, –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —ç—Ç–æ. \n\nüü¢ –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —Å–æ–±–ª—é–¥–∞—è –≤—Å–µ –∑–∞–∫–æ–Ω—ã –∏ –ø—Ä–∞–≤–∏–ª–∞ –†–æ—Å—Å–∏–∏.\n\n",
                reply_markup=await kb.payed_user_kb(),
            )
            return
        else:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username},\n\nüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \nü§Ø –£—Å—Ç–∞–ª –æ—Ç –ø–æ–∏—Å–∫–æ–≤ VPN?. \nüöÄ –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É VPN-WEBAM –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n\nüü¢ –ù–∞—à–∏ –ø—Ä–µ–º—É—â–µ—Å—Ç–≤–∞:\n\n‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–∞–π—Ç–∞–º –∏ —Å–æ—Ü —Å–µ—Ç—è–º \n\nüî¥ –ú—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤ –†–§ –≤–µ–±-—Å–∞–π—Ç–æ–≤, –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —ç—Ç–æ. \n\nüü¢ –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —Å–æ–±–ª—é–¥–∞—è –≤—Å–µ –∑–∞–∫–æ–Ω—ã –∏ –ø—Ä–∞–≤–∏–ª–∞ –†–æ—Å—Å–∏–∏.\n\n",
                reply_markup=await kb.free_user_kb(message.from_user.id)
            )
            return

 #—Ç—É—Ç —Ö–æ—Ç–µ–ª —á—Ç–æ –±—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ  cmd_admin –≤—ã–¥–∞–≤–∞–ª—Å—è –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞–º —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–ª —è —á–µ—Ä–µ–∑ –±–æ—Ç —Ñ–∞–∑–µ—Ä 
#async def cmd_admin(message: types.Message) -> types.Message:
    #if not message.from_user.username:
        #await message.answer(
           # f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username, —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∏ –Ω–∞–ø–∏—à–∏ /start\n"
           # f"–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å - –ø–æ—Å–º–æ—Ç—Ä–∏ {hlink('—Å–ø—Ä–∞–≤–∫—É', 'https://silverweb.by/kak-sozdat-nik-v-telegramm/')}",
           # parse_mode=types.ParseMode.HTML,
        #)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username},\n\nüëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! \nü§Ø –£—Å—Ç–∞–ª –æ—Ç –ø–æ–∏—Å–∫–æ–≤ VPN?. \nüöÄ –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É VPN-WEBAM –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n\nüü¢ –ù–∞—à–∏ –ø—Ä–µ–º—É—â–µ—Å—Ç–≤–∞:\n\n‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n‚úÖ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–∞–π—Ç–∞–º –∏ —Å–æ—Ü —Å–µ—Ç—è–º\n\nüî¥ –ú—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ VPN –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤ –†–§ –≤–µ–±-—Å–∞–π—Ç–æ–≤, –∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —ç—Ç–æ. \n\nüü¢ –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏—â–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —Å–æ–±–ª—é–¥–∞—è –≤—Å–µ –∑–∞–∫–æ–Ω—ã –∏ –ø—Ä–∞–≤–∏–ª–∞ –†–æ—Å—Å–∏–∏.\n\n",
        reply_markup=await kb.free_user_kb(message.from_user.id)
    )

    database.insert_new_user(message)




    # notify admin about new user
    for admin in configuration.admins:
        # format: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ò–º—è (id: id), username, id like code format in markdown
        try:
            await bot.send_message(
                admin,
                f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hcode(message.from_user.full_name)}\n"
                f"id: {hcode(message.from_user.id)}, username: {hcode(message.from_user.username)}",
                parse_mode=types.ParseMode.HTML,
            )
        except ChatNotFound:
            pass


async def cmd_pay(message: types.Message) -> None:
    match message.text:
        case "‚úÖ3 –º–µ—Å—è—Ü 300—Ä":
            payment_three_months = YookassaPayment(amount=300)
            payment_three_months.create(message.from_user.id)

            await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n‚¨á–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞‚¨á",
                parse_mode=types.ParseMode.HTML,
                reply_markup=await kb.create_new_payment_kb(
                    payment_three_months.payment_url, payment_three_months.payment_id, False, 1)
            )
           

        case "‚úÖ6 –º–µ—Å—è—Ü 600—Ä":
            payment_six_months = YookassaPayment(amount=600)
            payment_six_months.create(message.from_user.id)
            await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n‚¨á–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞‚¨á",

                parse_mode=types.ParseMode.HTML,
                reply_markup=await kb.create_new_payment_kb(payment_six_months.payment_url, payment_six_months.payment_id, False, 2)
            )
            
            
        case "‚úÖ12 –º–µ—Å—è—Ü 1200—Ä":
            payment_year = YookassaPayment(amount=1200)
            payment_year.create(message.from_user.id)
            await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n‚¨á–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞‚¨á",
                parse_mode=types.ParseMode.HTML,
                reply_markup=await kb.create_new_payment_kb(payment_year.payment_url, payment_year.payment_id, False, 3)
                )
          
            
        case "‚úÖ1 –º–µ—Å—è—Ü 100—Ä":
            payment_month = YookassaPayment()
            payment_month.create(message.from_user.id)
            await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n‚¨á–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞‚¨á",
                parse_mode=types.ParseMode.HTML,
                reply_markup=await kb.create_new_payment_kb(payment_month.payment_url, payment_month.payment_id, False, 0)
                )
           
            


async def get_payment_buttons(message: types.Message):
    await message.answer("üíµ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å VPN", reply_markup=await kb.get_pay_buttons())



async def check_payment(message: types.CallbackQuery) -> None:
    if message.data[:13] != "check_payment":
        return
    
    command, payment_id, free, time = message.data.split(":")
    free = True if int(free) == 1 else False
    payment = YookassaPayment(payment_id=payment_id)

    if payment.payment_paid is not True:
        await message.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–ª–∞—Ç—ë–∂.")
        return
    
    if free:
        await got_present(message, payment.payment_id)
        await message.message.delete()
        await bot.send_message(
            message.from_user.id,
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å –º–µ–Ω—è —Å—á–∞—Å—Ç–ª–∏–≤–µ–π!",
            reply_markup=await kb.payed_user_kb()
        )
        return
    
    match int(time):
        case 0:
            date = 30
        case 1:
            date = 90
        case 2:
            date = 180
        case 3:
            date = 365
        case _:
            date = 30

    await message.message.delete()
    await got_payment(message, payment.payment_id, date)
    await successful_payment_handler(message.from_user.id, payment.payment_amount, message, date)


async def got_present(message: types.CallbackQuery, payment_id: str):
    for admin in configuration.admins:
        try:
            await bot.send_message(
                admin,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name}\n"
                f"id: {hcode(message.from_user.id)}, username: {hcode(message.from_user.username)},\npayment: {payment_id} –ø–æ–¥–∞—Ä–∏–ª –¥–µ–Ω—å–≥–∏.",
                parse_mode=types.ParseMode.HTML,
                reply_markup=None
            )
        except ChatNotFound:
            pass


async def got_payment(message: types.CallbackQuery, payment_id: str, date: int):
    for admin in configuration.admins:
        try:
            await bot.send_message(
                admin,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name}\n"
                f"id: {hcode(message.from_user.id)}, username: {hcode(message.from_user.username)},\npayment: {payment_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN –Ω–∞ {date} –¥–Ω–µ–π.",
                parse_mode=types.ParseMode.HTML,
                reply_markup=None
            )
        except ChatNotFound:
            pass

async def successful_payment_handler(user_id: int, amount, message: types.CallbackQuery, date: int):
    database.update_user_payment(user_id, date)
    database.insert_new_payment(user_id, amount)
    if database.selector.is_user_have_config(user_id):
        try:
            await vpn_config.reconnect_payed_user(user_id)
        except Exception as e:
            logger.error(e)

    await message.message.answer(
        f"{message.from_user.full_name or message.from_user.username}, –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ vpn {database.selector.get_subscription_end_date(user_id)}",
        reply_markup=await kb.payed_user_kb()
    )


async def cmd_my_configs(message: types.Message):
    if database.selector.is_subscription_end(message.from_user.id):
        await cmd_start(message)
        return

    if database.selector.all_user_configs(message.from_user.id):
        await message.answer(
            "–û—Ç–æ–±—Ä–∞–∂–∞—é —Ç–≤–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö",
            reply_markup=await kb.configs_kb(message.from_user.id),
        )
    else:
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤",
            reply_markup=await kb.configs_kb(message.from_user.id),
        )


async def cmd_menu(message: types.Message):
    if database.selector.is_subscription_end(message.from_user.id):
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=await kb.free_user_kb(message.from_user.id),
        )
    else:
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.payed_user_kb()
        )


async def create_new_config(message: types.Message, state=FSMContext):
    if database.selector.is_subscription_end(message.from_user.id):
        await cmd_start(message)
        await state.finish()
        return

    await message.answer(
        "–î–ª—è –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥?",
        reply_markup=await kb.device_kb(message.from_user.id),
    )
    await NewConfig.device.set()


async def device_selected(call: types.CallbackQuery, state=FSMContext):
    if database.selector.is_subscription_end(call.from_user.id):
        await cmd_start(call.message)
        await state.finish()
        return

    """
    This handler will be called when user presses `pc` or `phone` button
    """
    await state.update_data(device=call.data)
    # edit message text and delete keyboard from message
    device = "üíª –ü–ö" if call.data.startswith("pc") else "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω"
    await call.message.edit_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª {device}, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∞", reply_markup=None
    )
    await state.finish()

    # add +1 to user config count
    database.update_user_config_count(call.from_user.id)

    device = "PC" if call.data.startswith("pc") else "PHONE"
    user_config = await vpn_config.update_server_config(
        username=call.from_user.username, device=device
    )

    database.insert_new_config(
        user_id=call.from_user.id,
        username=call.from_user.username,
        device=device,
        config=user_config,
    )

    io_config_file = BytesIO(user_config.encode("utf-8"))
    filename = f"{configuration.configs_prefix}_{call.from_user.username}_{device}.conf"

    # send config file
    await call.message.answer_document(
        types.InputFile(
            io_config_file,
            filename=filename,
        ),
        reply_markup=await kb.configs_kb(call.from_user.id),
    )

    if device == "PHONE":
        config_qr_code = create_qr_code_from_peer_data(user_config)
        await call.message.answer_photo(
            types.InputFile(
                config_qr_code,
                filename=f"{configuration.configs_prefix}_{call.from_user.username}.png",
            ),
        )


async def cancel_config_creation(call: types.CallbackQuery, state=FSMContext):
    if database.selector.is_subscription_end(call.from_user.id):
        await cmd_start(call.message)
        await state.finish()
        return

    await state.finish()
    await call.message.edit_text("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞", reply_markup=None)


async def cmd_show_config(message: types.Message, state=FSMContext):
    if database.selector.is_subscription_end(message.from_user.id):
        await cmd_start(message)
        await state.finish()
        return

    if message.text.lower().endswith("–ø–∫"):
        device = "PC"
    elif message.text.lower().endswith("—Å–º–∞—Ä—Ç—Ñ–æ–Ω"):
        device = "PHONE"

    config = database.selector.get_user_config(
        user_id=message.from_user.id,
        config_name=f"{message.from_user.username}_{device}",
    )
    filename = (
        f"{configuration.configs_prefix}_{message.from_user.username}_{device}.conf"
    )
    io_config_file = BytesIO(config.encode("utf-8"))

    if device == "PC":
        # send config file
        await message.answer_document(
            types.InputFile(
                io_config_file,
                filename=filename,
            ),
        )

    if device == "PHONE":
        # firstly create qr code image, then send it with config file
        # this method is used for restrict delay between sending file and photo
        image_filename = (
            f"{configuration.configs_prefix}_{message.from_user.username}.png"
        )
        config_qr_code = create_qr_code_from_peer_data(config)

        await message.answer_document(
            types.InputFile(
                io_config_file,
                filename=filename,
            ),
        )

        await message.answer_photo(
            types.InputFile(
                config_qr_code,
                filename=image_filename,
            ),
        )


async def cmd_support(message: types.Message):
    # send telegraph page with support info (link: https://telegra.ph/FAQ-po-botu-01-08)
    await message.answer(
        f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ {hlink('—Å—Ç—Ä–∞–Ω–∏—Ü–µ','https://telegra.ph/WEBAM-BOT-09-07')}",
        parse_mode=types.ParseMode.HTML,
    )

    admin_username = selector.get_username_by_id(configuration.admins[0])
    admin_telegram_link = f"t.me/{admin_username}"
    await message.answer(
        f"–ï—Å–ª–∏ —É —Ç–µ–±—è –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å {hlink('–º–Ω–µ',admin_telegram_link)} –ª–∏—á–Ω–æ",
        parse_mode=types.ParseMode.HTML,
    )


async def cmd_show_end_time(message: types.Message):
    if database.selector.is_subscription_end(message.from_user.id):
        await cmd_start(message)
        return

    # show user end time
    await message.answer(
        f"{message.from_user.full_name or message.from_user.username}, "
        f"—Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ VPN –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è {database.selector.get_subscription_end_date(message.from_user.id)}"
    )


async def cmd_show_subscription(message: types.Message):
    if database.selector.is_subscription_end(message.from_user.id):
        await cmd_start(message)
        return

    await message.answer(
        f"{message.from_user.full_name or message.from_user.username}, "
        "–∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å–ø–æ—Ä—è–¥–∏—Ç—å—Å—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        reply_markup=await kb.subscription_management_kb(),
    )


async def cmd_reboot_wg_service(message: types.Message):
    if database.selector.is_subscription_end(message.from_user.id):
        await cmd_start(message)
        return

    await message.answer("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ WireGuard...")
    vpn_config.restart_service()
    await message.answer("–°–µ—Ä–≤–∏—Å WireGuard –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")


async def sponsors(message: types.Message):
    await message.answer("üòé–õ—é–¥–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏–µ –ø—Ä–æ–µ–∫—Ç \n\n@web_am - 200—Ä\n@durov - 150—Ä ")


async def prices(message: types.Message):
    await message.answer("‚úÖ1 –º–µ—Å—è—Ü 100—Ä\n‚úÖ3 –º–µ—Å—è—Ü 300—Ä\n‚úÖ6 –º–µ—Å—è—Ü 600—Ä\n‚úÖ12 –º–µ—Å—è—Ü 1200—Ä")

async def cmd_set(message: types.Message):
   await message.answer(
        f"‚úÖ–í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫–∞–∫ –∫—É–ø–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å{hlink('VPN','https://rutube.ru/video/8d4e927ac11658f5aeab73e68b4a3b7b/?r=wd')}\n\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Wireguard \n \nüî∞–î–ª—è iPhone‚û°Ô∏è{hlink('WireGuard','https://apps.apple.com/ru/app/wireguard/id1441195209 ')}\nüî∞–î–ª—è Andoid‚û°Ô∏è{hlink('WireGuard','https://play.google.com/store/apps/datasafety?id=com.wireguard.android&hl=ru&gl=US')}\n\n‚úÖ–ï—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n1Ô∏è‚É£ –ß–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—É WireGuard –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ qr-–∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤–∞–º –¥–∞–¥–∏–º –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∏ –∑–∞–π–¥–µ—Ç–µ –∏–º—è —Å–≤–æ–µ–º—É vpn\n\n2Ô∏è‚É£ –ü–æ–ª–µ—á–µ–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –æ—Ç–∫—Ä–æ–π—Ç–µ –ß–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—É WireGuard \n\n‚ùó O–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ QR –∫–æ–¥ –∏ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!",
        parse_mode=types.ParseMode.HTML,
    )
